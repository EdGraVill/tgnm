export default function generatei18nTemplateFile(defaultLocale: string, locales: string[]) {
  return `//
// DO NOT EDIT THIS FILE MANUALLY. IF THE FILE IS MANUALLY CHANGED, COULD BE REPLACED WITH A DEFAULT VERSION
// Instead use: "yarn tgnm" for locales manipulation
//

import i18next, { TOptions, StringMap } from 'i18next';
import { DottedLanguageObjectStringPaths, TuplifyUnion } from '../types';
import { getObjectPaths, isProdEnv } from '../util';

import ${defaultLocale.replace('-', '')}, { LangType } from './${defaultLocale}';
export type { LangType } from './${defaultLocale}';

export type LangPath = DottedLanguageObjectStringPaths<LangType>;

export const defaultLocale = '${defaultLocale}';

export const locales = {
${locales
  .map(
    (locale) =>
      `  ${locale.includes('-') ? `'${locale}'` : locale}: async () => (await import('./${locale}')).default,\n`,
  )
  .reduce((prev, curr) => prev + curr)}};

export type localeType = keyof typeof locales;

export const availableLocales = Object.keys(locales) as TuplifyUnion<localeType>;

export interface Translator {
  <TInterpolationMap extends Record<string, unknown> = StringMap>(
    path: LangPath,
    options?: TOptions<TInterpolationMap>,
  ): string;
  (path: LangPath, defaultValue: string): string;
  <TInterpolationMap extends Record<string, unknown> = StringMap>(
    path: LangPath,
    defaultValue?: string,
    options?: TOptions<TInterpolationMap> | string,
  ): string;
}

export async function loadLocale(locale: keyof typeof locales): Promise<Translator> {
  const language = await locales[locale]();
  const t = await i18next.init({
    lng: locale,
    debug: !isProdEnv,
    resources: {
      [locale]: {
        translation: language,
      },
    },
  });

  function translator<TInterpolationMap extends Record<string, unknown> = StringMap>(
    path: LangPath,
    optionsOrDefaultValue?: TOptions<TInterpolationMap> | string,
    options?: TOptions<TInterpolationMap> | string,
  ): string {
    return t(path, optionsOrDefaultValue as string, options);
  }

  return translator;
}

export const langPathList = getObjectPaths(${defaultLocale.replace(/-/g, '')});

export const langPaths = langPathList.reduce(
  (prev, curr) => ({
    ...prev,
    [curr]: curr,
  }),
  {},
) as Record<LangPath, string>;

export const i18n: Translator = (...parameters: Parameters<Translator>) => JSON.stringify(parameters);
`;
}
